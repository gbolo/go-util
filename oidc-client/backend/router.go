package backend

import (
	"fmt"
	"net/http"
	"strings"

	"oidc-client/docs"

	"github.com/gorilla/handlers"
	"github.com/gorilla/mux"
	"github.com/spf13/viper"
	httpSwagger "github.com/swaggo/http-swagger"
)

// @title oidc-client
// @description Swagger API oidc-client
// @termsOfService http://swagger.io/terms/
// @contact.name API Support
// @contact.email dev@oidc-client
// @BasePath /api

const (
	// APIVersion defines the compatibility version of the API and is appended to each API route
	APIVersion     = "1"
	endpointFormat = "/api/v%s/%s"
)

// getEndpoint returns a properly formatted API endpoint
func getEndpoint(suffix string) string {
	return fmt.Sprintf(endpointFormat, APIVersion, suffix)
}

// Route defines a route passed to our mux
type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
}

var callbackPath = getEndpoint("callback")
var authPath = getEndpoint("auth")

var routes = []Route{
	{
		"Landing Page",
		"GET",
		"/",
		handlerLanding,
	},
	{
		"Version",
		"GET",
		getEndpoint("version"),
		handlerVersion,
	},
	{
		"JWKS",
		"GET",
		getEndpoint("jwks"),
		handlerJwks,
	},
	{
		"Auth",
		"GET",
		authPath,
		handlerAuthRedirect,
	},
	{
		"Callback",
		"GET",
		callbackPath,
		handlerCallback,
	},
}

func newRouter() *mux.Router {
	// set swagger version
	if strings.Contains(Version, "SNAPSHOT") {
		docs.SwaggerInfo.Version = fmt.Sprintf("%s-%s", Version, CommitSHA)
	} else {
		docs.SwaggerInfo.Version = Version
	}

	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {

		// add compression support to handler if enabled
		var handler http.Handler
		handler = route.HandlerFunc
		if viper.GetBool("server.compression") {
			handler = handlers.CompressHandler(route.HandlerFunc)
		}

		// add routes to mux
		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	// add swagger UI
	router.Methods("GET").Path("/swagger").HandlerFunc(func(w http.ResponseWriter, req *http.Request) {
		// redirect to /swagger/index.html which is provided by httpSwagger.WrapHandler
		http.Redirect(w, req, "/swagger/index.html", 301)
	})
	router.Methods("GET").PathPrefix("/swagger").Handler(httpSwagger.WrapHandler)

	// add route to mux to handle frontend UI static files (generated by npm)
	staticPath := viper.GetString("server.static_files_dir")
	if staticPath == "" {
		staticPath = "./frondent/dist"
	}

	handlerStatic := http.StripPrefix("/", http.FileServer(http.Dir(staticPath)))
	// add compression support to handler if enabled
	if viper.GetBool("server.compression") {
		handlerStatic = handlers.CompressHandler(handlerStatic)
	}

	router.
		Methods("GET").
		PathPrefix("/").
		Handler(handlerStatic)

	return router
}
